### 9/3
#0강
npx create-react-app blog로 리액트 새로 생성
메인페이지: src/App.js
미리보기: 터미널에 npm start

#2강
리액트는 데이터바인딩이 매우 쉽다. 그래서 쌩HTML 대신 React를 쓴다.
데이터바인딩: 서버에서 가져온 데이터를 javascript로 받아온 후 html을 통해 화면에 나타내는 방법.

#3강
useState
state에 데이터 저장하는 이유는 웹이 app처럼 동작하게 만들고 싶어서임
state는 변경되면 html이 자동으로 재렌더링된다.
state의 구조: [state,변경state] = useState(['자료1', '자료2', '자료3', ... ]);
html에 그대로 { state[0] } 이런식으로 표시,

#4강
터미널에 문법적 warning이 안뜨게 하고 싶으면 /* eslint-disable */ 

#5강
state는 변경 시에 직접 건들면 안되고, deep copy를 만들어야함
var newArray = [...원래state];


#6강
Component: HTML을 한 단어로 줄여서 쓰는 방법.
예로, <div></div> 대신에, <Modal />
반복출현하는 html덩어리들을 Component로 만드는 게 좋다.

###9/4

#8강
map: 복붙할 때 좋음
[1,2,3].map(function(){}) 를 실행하면, array[] 내의 자료 갯수만큼 함수 안의 코드를 실행해줌

글제목.map(function(a, i) 에서 i는 반복문이 0부터 1씩 증가하는 함수

#9강
Props: 부모가 가지고 있던 state를 자식도 쓸 수 있게 해줌(원래는 변수는 바깥으로 이동못함)
원래 <Modal />에서 <Modal 작명={state이름}/> 이렇게 바꿈
이제 Modal()을 Modal(props)로 변경하고, {props.작명} 이렇게 사용하면 됨

#10강
<input onChange={(e) => { console.log(e.target.value)}}></input> 
입력값이 바뀔 때마다 알게 해줌

#12강
Class 문법으로 컴포넌트를 만들려면: 
기본세팅: class Modal2 extends React.Component{
  constructor(){
    super()
  }
  render(){
    return(
      <div></div>
    )
  }
}

